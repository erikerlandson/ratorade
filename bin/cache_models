#!/bin/env python

# ratorade: Everyone's a critic
#
# Copyright (c) 2012 Erik Erlandson
#
# Author:  Erik Erlandson <erikerlandson@yahoo.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import time
import argparse
import pymongo

import ratorade
import dbutils

argparser = argparse.ArgumentParser(parents=[dbutils.parser])
argparser.add_argument('stats', metavar='<stats-coll>', help='stats collection name')
argparser.add_argument('models', metavar='<models-coll>', help='models collection name')
argparser.add_argument('-ssmin', type=int, default=5, metavar='<N>', help='cache only models with sample size >= N')
argparser.add_argument('-rrmin', type=float, default=0.5, metavar='<X>', help='cache only models with r-squared >= X')
argparser.add_argument('-refresh', default=False, action='store_true', help='refresh all models from scratch')
argparser.add_argument('-absamax', type=float, metavar='<X>', help='cache only models with slope |a| <= X')
argparser.add_argument('-absbmax', type=float, metavar='<X>', help='cache only models with const |b| <= X')

args = argparser.parse_args()

t00 = time.time()

# these must exist:
mongo = dbutils.require_connection(args.dbserver)
ratorade_db = dbutils.require_db(mongo, args.dbname)
stats = dbutils.require_collection(ratorade_db, args.stats)
# this can be silently created if it doesn't already exist:
models = ratorade_db[args.models]

if args.refresh:
    sys.stdout.write("refreshing model collection %s\n" % (args.models))
    models.drop()
    models = ratorade_db[args.models]

sys.stdout.write("updating indexes for %s...\n" % (args.stats))
stats.ensure_index([("n", pymongo.ASCENDING)])

# to do: include a notion of 'since last model cache run':
statquery = {"n":{'$gte':args.ssmin}}

sys.stdout.write("caching model parameters to %s...\n" % (args.models))
for srec in stats.find(statquery, fields=["n","s0","s1","s00","s11","s01"]):
    ratorade.update_model_linear(models, srec, ssmin=args.ssmin, rrmin=args.rrmin, absamax=args.absamax, absbmax=args.absbmax)

sys.stdout.write("total run time: %d sec\n" % (int(time.time()-t00)))
